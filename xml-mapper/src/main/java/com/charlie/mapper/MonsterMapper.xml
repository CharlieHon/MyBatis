<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
1. 这是一个mapper xml文件
2. 该文件可以去实现对应的接口的方法
3. namespace指定该xml文件和哪个接口对应
-->
<mapper namespace="com.charlie.mapper.MonsterMapper">
    <!--
    1. 配置/实现 public List<Monster> findMonsterByNameORId(Monster monster);
    2. 通过id或者名字查询
    3. `id`=#{id}： `id`表示表的字段，#{id}表示传入monster对象的属性名
    -->
    <select id="findMonsterByNameORId" parameterType="Monster" resultType="Monster">
        SELECT * FROM `monster` WHERE `id`=#{id} OR `name`=#{name};
    </select>

    <!--
    1. 配置/实现public List<Monster> findMonsterByName(String name);
    2. 查询名字中包含 "精" 的妖怪
    3. 模糊查询的使用，取值需要使用 ${name}
    -->
    <select id="findMonsterByName" parameterType="String" resultType="Monster">
        SELECT * FROM `monster` WHERE `name` LIKE '%${name}%';
    </select>
    <!--
    1. 配置/实现 public List<Monster> findMonsterByIdAndSalary_ParameterHashMap(Map<String, Object> map);
    2. 查询 id > 3 并且 salary > 3000 的妖怪，要求使用HashMap形式参数
    3. 如果是以map形式传入参数，当条件为`id`>#{id}，表示map中有一个k-v的key是id
    -->
    <select id="findMonsterByIdAndSalary_ParameterHashMap" parameterType="map" resultType="Monster">
        SELECT * FROM `monster` WHERE `id`>#{id} AND `salary`>#{salary};
    </select>

    <!--
    1. 配置/实现public List<Map<String, Object>> findMonsterByIdAndSalary_ParameterHspMap_ReturnHashMap(Map<String, Object> map);
    2.查询 id > 3 并且 salary > 3000 的妖怪，要求参数类型和返回类型都是HashMap
    -->
    <select id="findMonsterByIdAndSalary_ParameterHspMap_ReturnHashMap" parameterType="map" resultType="map">
        SELECT * FROM `monster` WHERE `id`>#{id} AND `salary`>#{salary};
    </select>
</mapper>