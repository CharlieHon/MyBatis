<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.charlie.mapper.MonsterMapper">
    <!--
    1. 配置/实现public List<Monster> findMonsterByAge(@Param(value = "age") Integer age);
    2. 请查询age大于10的所欲妖怪,如果输入的age不大于0,则输出所有的妖怪
    3. 按照以前的方式来配置->问题
            如果使用原来的 #{age},在test表达式中取不出参数值
    4. 解决方案是使用 @Param
    -->
    <select id="findMonsterByAge" parameterType="Integer" resultType="Monster">
        SELECT * FROM `monster` WHERE 1=1
        <if test="age > 0">
            AND `age`>#{age}
        </if>
    </select>

    <!--
    1. 配置/实现public List<Monster> findMonsterByIdAndName(Monster monster);
    2. 查询id大于4,且名字是青牛怪的记录,如果名字为空,则不包含名字条件;如果id小于等于0,则不包含id条件
    3. 如果传入参数是对象,那么在 <if test=""> 的test标签中直接使用属性名即可
    4. where标签:会在阻止动态sql时,加上where
    5. mybatis底层会自动地去掉多余的AND
    -->
    <select id="findMonsterByIdAndName" parameterType="Monster" resultType="Monster">
        SELECT * FROM `monster` -- 不需要再加 where,下面的where标签即是
        <where>
            <if test="id > 0">
                AND `id`>#{id}
            </if>
            <if test="name != null and name != ''">
                AND `name`=#{name}
            </if>
        </where>
    </select>

    <!--
    1. 配置/实现public List<Monster> findMonsterByIdOrName_choose(Map<String, Object> map);
    2.  1) 如果name不为空,就按名字查询
        2) 如果指定的id>0,就按id查询
        3) 如果都不符合,就查询 salary > 1000 的
    3. 使用mybatis提供的 choose-when-otherwise完成
    -->
    <select id="findMonsterByIdOrName_choose" parameterType="map" resultType="Monster">
        SELECT * FROM `monster`
        <choose>
            <when test="name != null and name != ''">
                WHERE `name`=#{name}
            </when>
            <when test="id > 0">
                WHERE `id`>#{id}
            </when>
            <otherwise>
                WHERE `salary`>1000
            </otherwise>
        </choose>
    </select>
    
    <!--
    1. 配置/实现public List<Monster> findMonsterById_forEach(Map<String, Object> map);
    2. 查询id为 4, 5, 6的妖怪
    3. 使用 foreach 标签
    4. 入参map中会如何传入id的值,k-v.如ids-[集合,把比如List]
    -->
    <select id="findMonsterById_forEach" parameterType="map" resultType="Monster">
        SELECT * FROM `monster`
        <!--
        1. where标签
        2. 再写入响应的代码,比如判断ids是否值为空
        3. 如果ids不为空,则使用foreach进行遍历
        4. collection="ids":对应入参的key
        5. item="id":在遍历ids集合时,每次取出的值,对应的变量为id
        6. open="(":对应的就是sql (4, 5, 6) 中的 (
        7. separator=",":遍历出来的多个值的分隔符号
        8. close=")":对应的就是sql (4, 5, 6) 中最后的 )
        9. #{id}:对应的前面的 item="id"
        -->
        <if test="ids != null and ids != ''">
            <where>
                id IN
                <foreach collection="ids" item="id" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </where>
        </if>
    </select>

    <!--
    1. 配置/实现public List<Monster> findMonsterByName_trim(Map<String, Object> map);
    2. 按照名字和年龄查询妖怪,如果sql语句开头有 and | or 就替换成 where
    3. 使用where标签会加入where标签,同时去掉多余的AND
        where元素只会在子元素返回的内容开头有 AND 或 OR 的时候,根据条件去掉多余的 AND
    4. <trim prefix="WHERE" prefixOverrides="and|or|hsp">:如果子句的开头有and或or或者hsp,
        就将其去除多余的
    5. 如下面的hsp,虽然非法,但是是在第一个子句的开头,始终都会被去掉,所以不会报错
    -->
    <select id="findMonsterByName_trim" parameterType="map" resultType="Monster">
        select * from `monster`
        <trim prefix="WHERE" prefixOverrides="and|or|hsp">
            <if test="name != null and name != ''">
                hsp `name`=#{name}
            </if>
            <if test="age != null and age != ''">
                AND `age`>#{age}
            </if>
        </trim>
    </select>

    <!--
    1. 配置/实现public void updateMonster_set(Map<String, Object> map);
    2. 对指定id的妖怪进行属性修改,如果没有设置的属性,则保持原来的值
    3. 入参要根据SQL语句配合
    4. set标签中sql语句都加上逗号, 最终多余的逗号会被去掉,但是不会自动加上逗号,注意!
    -->
   <update id="updateMonster_set" parameterType="map">
       UPDATE `monster`
       <set>
            <if test="age != null and age != ''">
                `age`=#{age},
            </if>
           <if test="email != null and email != ''">
               `email`=#{email},
           </if>
           <if test="name != null and name != ''">
               `name`=#{name},
           </if>
           <if test="birthday != null and birthday != ''">
               `birthday`=#{birthday},
           </if>
           <if test="salary != null and salary != ''">
               `salary`=#{salary},
           </if>
           <if test="gender != null and gender != ''">
               `gender`=#{gender},
           </if>
       </set>
       WHERE `id`=#{id}
   </update>
</mapper>